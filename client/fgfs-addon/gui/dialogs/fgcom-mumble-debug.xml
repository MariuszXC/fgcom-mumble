<?xml version="1.0"?>
<PropertyList>
    <name>fgcom-mumble-debug</name>
    <layout>vbox</layout>
    <width>825</width>

    <nasal>
        <open>
        <![CDATA[
            fgcom_mumble_write_debug_sim_data = func() {
                print("FGCom-mumble SIM DATA:" );
                debug.tree("//sim/version/", 1);
            }
            
            fgcom_mumble_write_debug_addon_data = func() {
                print("FGCom-mumble INTERNAL STATE:" );
                debug.tree("/addons/by-id/org.hallinger.flightgear.FGCom-mumble/", 1);
            }
            
            fgcom_mumble_write_debug_aircraft_data = func() {
                print("FGCom-mumble AIRCRAFT DATA:" );
                debug.tree("/sim/aero", 1);
                debug.tree("/sim/aircraft", 1);
                debug.tree("/sim/aircraft-id", 1);
                debug.tree("/sim/aircraft-dir", 1);
                debug.tree("/sim/aircraft-version", 1);
            }
                
            fgcom_mumble_write_debug_com_data = func() {
                print("FGCom-mumble AIRCRAFT COM DEVICES:" );
                var aircraft_instr = props.globals.getNode("/instrumentation");
                foreach (o; aircraft_instr.getChildren("audio-panel")) {
                    debug.tree(o, 1);
                }
                foreach (o; aircraft_instr.getChildren("comm")) {
                    debug.tree(o, 1);
                }
                foreach (o; aircraft_instr.getChildren("adf")) {
                    debug.tree(o, 1);
                }
            }
        ]]>
        </open>
        <close>
            udpout_text_update_t.stop();
            udpin_text_update_t.stop();
        </close>
    </nasal>


    <group>
        <layout>hbox</layout>

        <text>
            <stretch>1</stretch>
            <halign>left</halign>
            <label>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</label>
            <format>FGCom-mumble (%s) DEBUG options</format>
            <property>/addons/by-id/org.hallinger.flightgear.FGCom-mumble/version</property>
        </text>

        <empty><stretch>1</stretch></empty>

        <button>
            <legend>X</legend>
            <key>Esc</key>
            <pref-width>20</pref-width>
            <pref-height>20</pref-height>
            <binding>
                <command>dialog-close</command>
            </binding>
        </button>

    </group>

    <hrule/>

    <text>
        <halign>left</halign>
        <label>If you want to track down a bug or compatibility issue, or want to help the devs fix a bug,</label>
    </text>
    <text>
        <halign>left</halign>
        <label>you can generate debug data here. The data will be printed to your fgfs.log file (and terminal).</label>
    </text>
    <text>
        <halign>left</halign>
        <label>Unless you specify an alternative '--logdir=' in your launcher, the fgfs.log is written to</label>
    </text>
    <text>
        <halign>left</halign>
        <label>the default location (see: https://wiki.flightgear.org/Commonly_used_debugging_tools#fgfs.log).</label>
    </text>

    <hrule/>

    <text>
        <halign>left</halign>
        <label>Debug messages:</label>
    </text>
    <group>
        <layout>hbox</layout>
        <halign>left</halign>
        <group>
            <layout>hbox</layout>
            
            <default-padding>10</default-padding>
            <empty><width>6</width><stretch>1</stretch></empty>
        </group>
        
        <group>
            <layout>vbox</layout>
            <halign>left</halign>
            <group>
                <layout>hbox</layout>
                <halign>left</halign>
                
                <combo>
                    <name>level_selector</name>
                    <pref-width>60</pref-width>
                    <live>true</live>
                    <property>/addons/by-id/org.hallinger.flightgear.FGCom-mumble/debug/level</property>
                    <value>0</value>
                    <value>1</value>
                    <value>2</value>
                    <value>3</value>
                    <value>4</value>
                    <value>5</value>
                    <binding>
                        <command>dialog-apply</command>
                        <object-name>level_selector</object-name>
                    </binding>
                </combo>
                
                <text>
                    <halign>left</halign>
                    <label>Level (0=none, 1=ERROR, 2=INFO; 3=FINE, 4=FINER, 5=FINEST)</label>
                </text>
            </group>
            <group>
                <layout>table</layout>
                <checkbox>
                    <row>0</row>
                    <col>0</col>
                    <halign>left</halign>
                    <label>core</label>
                    <live>true</live>
                    <property>/addons/by-id/org.hallinger.flightgear.FGCom-mumble/debug/category_core</property>
                    <binding>
                        <command>dialog-apply</command>
                    </binding>
                </checkbox>
                <checkbox>
                    <row>0</row>
                    <col>1</col>
                    <halign>left</halign>
                    <label>radio</label>
                    <live>true</live>
                    <property>/addons/by-id/org.hallinger.flightgear.FGCom-mumble/debug/category_radio</property>
                    <binding>
                        <command>dialog-apply</command>
                    </binding>
                </checkbox>
                <checkbox>
                    <row>0</row>
                    <col>2</col>
                    <halign>left</halign>
                    <label>intercom</label>
                    <live>true</live>
                    <property>/addons/by-id/org.hallinger.flightgear.FGCom-mumble/debug/category_intercom</property>
                    <binding>
                        <command>dialog-apply</command>
                    </binding>
                </checkbox>
                <checkbox>
                    <row>1</row>
                    <col>0</col>
                    <halign>left</halign>
                    <label>combar</label>
                    <live>true</live>
                    <property>/addons/by-id/org.hallinger.flightgear.FGCom-mumble/debug/category_combar</property>
                    <binding>
                        <command>dialog-apply</command>
                    </binding>
                </checkbox>
                <checkbox>
                    <row>1</row>
                    <col>1</col>
                    <halign>left</halign>
                    <label>udp</label>
                    <live>true</live>
                    <property>/addons/by-id/org.hallinger.flightgear.FGCom-mumble/debug/category_udp</property>
                    <binding>
                        <command>dialog-apply</command>
                    </binding>
                </checkbox>
                <checkbox>
                    <row>1</row>
                    <col>2</col>
                    <halign>left</halign>
                    <label>rdf</label>
                    <live>true</live>
                    <property>/addons/by-id/org.hallinger.flightgear.FGCom-mumble/debug/category_rdf</property>
                    <binding>
                        <command>dialog-apply</command>
                    </binding>
                </checkbox>
            </group>
        </group>
            
    </group>
    
    <hrule/>
    
    <text>
        <halign>left</halign>
        <label>Dump stuff to log:</label>
    </text>
    <group>
        <layout>hbox</layout>
        <halign>left</halign>
        <group>
            <layout>hbox</layout>
            
            <default-padding>10</default-padding>
            <empty><width>6</width><stretch>1</stretch></empty>
        </group>
        
        <button>
            <legend>Dump all</legend>
            <pref-width>180</pref-width>
            <pref-height>30</pref-height>
            <halign>left</halign>
            <binding>
                <command>nasal</command>
                <script><![CDATA[
                    fgcom_mumble_write_debug_sim_data();
                    fgcom_mumble_write_debug_addon_data();
                    fgcom_mumble_write_debug_aircraft_data();
                    fgcom_mumble_write_debug_com_data();
                ]]></script>
            </binding>
        </button>
        
        <vrule/>
        
        <button>
            <legend>Addon state</legend>
            <pref-width>180</pref-width>
            <pref-height>30</pref-height>
            <halign>left</halign>
            <binding>
                <command>nasal</command>
                <script><![CDATA[
                    fgcom_mumble_write_debug_sim_data();
                    fgcom_mumble_write_debug_addon_data();
                ]]></script>
            </binding>
        </button>
        <button>
            <legend>Aircraft data</legend>
            <pref-width>180</pref-width>
            <pref-height>30</pref-height>
            <halign>left</halign>
            <binding>
                <command>nasal</command>
                <script><![CDATA[
                    fgcom_mumble_write_debug_sim_data();
                    fgcom_mumble_write_debug_aircraft_data();
                    fgcom_mumble_write_debug_com_data();
                ]]></script>
            </binding>
        </button>
            
    </group>
    
    <hrule/>
    
    <group>
        <layout>vbox</layout>
        <empty><stretch>10</stretch></empty>
        <text>
            <halign>left</halign>
            <label>UDP protocol raw output data:</label>
        </text>
        <canvas>
            <name>udp_out</name>

            <valign>top</valign>
            <halign>fill</halign>
            <stretch>false</stretch>
            <pref-width>300</pref-width>
            <pref-height>100</pref-height>
            <!--<height>480</height>-->
            <nasal>
                <load>
                    <![CDATA[
                    var my_canvas = canvas.get(cmdarg());
                    var udpout_root = my_canvas.createGroup();
                    var udpout_text = udpout_root.createChild("text")
                    .setText("loading...")
                    .setFontSize(12, 1.0)      # font size (in texels) and font aspect ratio
                    .setColor(1,1,1,1)         # font color
                    .setAlignment("top-left")  # how the text is aligned to where you place it
                    .setTranslation(0, 15);     # where to place the text
                    
                    var udpout_text_update_t = maketimer(0.1, udpout_text, func(){
                        var wrapAt = 100;      # after so many characters, sart a new line
                        var s = "";
                        var udp_out_nodes = props.globals.getNode("/addons/by-id/org.hallinger.flightgear.FGCom-mumble/output").getChildren("udp");
                        foreach (var udp_out_n; udp_out_nodes) {
                            # Generate debug string and do a nice wrapping:
                            #   walk each chunk and print its chars as long as we have space for the chunk in the line
                            var pfx = sprintf("%s[%d]=",udp_out_n.getName(), udp_out_n.getIndex());
                            var chunks = split(",", pfx~udp_out_n.getValue());  # a chunk is a udp protocol part: "field=value"
                            var charsLeft = wrapAt;
                            for (var i=0; i<size(chunks); i = i+1) {
                                var ch_chrs = split("", chunks[i]);
                                if (charsLeft <= size(ch_chrs)) {
                                    # wrapping needed
                                    s = s ~ "\n";
                                    for (var pfx_c=0;pfx_c<size(pfx);pfx_c=pfx_c+1) s = s~" "; # left-pad the new line by the size of the prefix
                                    charsLeft = wrapAt-size(pfx);
                                }
                                for (var ch=0; ch<size(ch_chrs); ch=ch+1) {
                                    s = s ~ ch_chrs[ch];
                                    charsLeft = charsLeft -1;
                                }
                                if (size(ch_chrs) > 0) {
                                    s = s ~ ",";
                                    charsLeft = charsLeft -1;
                                }
                            }
                            
                            s = s~"\n"; # end this udp string prop
                        }
                        udpout_text.setText(s);
                    });
                    udpout_text_update_t.start();
                    ]]>
                </load>
            </nasal>
        </canvas>
    </group>
    
    <group>
        <layout>vbox</layout>
        <empty><stretch>10</stretch></empty>
        <text>
            <halign>left</halign>
            <label>UDP protocol raw input data:</label>
        </text>
        <canvas>
            <name>udp_in</name>

            <valign>top</valign>
            <halign>fill</halign>
            <stretch>false</stretch>
            <pref-width>300</pref-width>
            <pref-height>100</pref-height>
            <!--<height>480</height>-->
            <nasal>
                <load>
                    <![CDATA[
                    var my_canvas = canvas.get(cmdarg());
                    var udpin_root = my_canvas.createGroup();
                    var udpin_text = udpin_root.createChild("text")
                    .setText("loading...")
                    .setFontSize(12, 1.0)      # font size (in texels) and font aspect ratio
                    .setColor(1,1,1,1)         # font color
                    .setAlignment("top-left")  # how the text is aligned to where you place it
                    .setTranslation(0, 15);     # where to place the text
                    
                    var udpin_text_update_t = maketimer(0.1, udpin_text, func(){
                        var wrapAt = 100;      # after so many characters, sart a new line
                        var s = "";
                        var udp_in_nodes = props.globals.getNode("/addons/by-id/org.hallinger.flightgear.FGCom-mumble/rdfinput").getChildren();
                        foreach (var udp_in_n; udp_in_nodes) {
                            # Generate debug string and do a nice wrapping:
                            #   walk each chunk and print its chars as long as we have space for the chunk in the line
                            var pfx = sprintf("%s=",udp_in_n.getName());
                            var chunks = split(",", pfx~udp_in_n.getValue());  # a chunk is a udp protocol part: "field=value"
                            var charsLeft = wrapAt;
                            for (var i=0; i<size(chunks); i = i+1) {
                                var ch_chrs = split("", chunks[i]);
                                if (charsLeft <= size(ch_chrs)) {
                                    # wrapping needed
                                    s = s ~ "\n";
                                    for (var pfx_c=0;pfx_c<size(pfx);pfx_c=pfx_c+1) s = s~" "; # left-pad the new line by the size of the prefix
                                    charsLeft = wrapAt-size(pfx);
                                }
                                for (var ch=0; ch<size(ch_chrs); ch=ch+1) {
                                    s = s ~ ch_chrs[ch];
                                    charsLeft = charsLeft -1;
                                }
                                if (size(ch_chrs) > 0) {
                                    s = s ~ "";
                                    charsLeft = charsLeft -1;
                                }
                            }
                            
                            s = s~"\n"; # end this udp string prop
                        }
                        udpin_text.setText(s);
                    });
                    udpin_text_update_t.start();
                    ]]>
                </load>
            </nasal>
        </canvas>
    </group>

    <hrule/>

    <group>
        <layout>hbox</layout>
        <empty><stretch>1</stretch></empty>

        <button>
            <legend>Close</legend>
            <pref-width>90</pref-width>
            <pref-height>30</pref-height>
            <binding>
                <command>dialog-close</command>
            </binding>
        </button>
        <empty><stretch>1</stretch></empty>
    </group>
</PropertyList>
